{"version":3,"sources":["components/Popular.js","components/New.js","components/Rating.js","App.js","serviceWorker.js","index.js"],"names":["Popular","props","className","children","New","Rating","Component","this","views","React","RatingVideo","title","src","url","frameborder","allow","allowfullscreen","RatingArticle","href","List","list","map","item","type","key","shortid","generate","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAEe,SAASA,EAAQC,GAC5B,OACI,yBAAKC,UAAU,+BACX,0BAAMA,UAAU,SAAhB,YACCD,EAAME,UCJJ,SAASC,EAAIH,GACxB,OACI,yBAAKC,UAAU,2BACX,0BAAMA,UAAU,SAAhB,QACCD,EAAME,UCFJ,SAASE,EAAOC,GAC7B,8KAEI,OAAIC,KAAKN,MAAMO,OAAS,IAEpB,kBAACR,EAAD,KACE,kBAACM,EAAcC,KAAKN,QAGfM,KAAKN,MAAMO,MAAQ,IAE1B,kBAACJ,EAAD,KACE,kBAACE,EAAcC,KAAKN,QAInB,kBAACK,EAAcC,KAAKN,WAf/B,GAAqBQ,IAAMH,W,oBCAvBI,EAAcL,GAYpB,SAAeJ,GACX,OACI,yBAAKC,UAAU,mBACX,4BAAQS,MAAM,QAAQC,IAAKX,EAAMY,IAAKC,YAAY,IAAIC,MAAM,4BAA4BC,iBAAe,IACvG,uBAAGd,UAAU,SAAb,iEAAkCD,EAAMO,WAf9CS,EAAgBZ,GAEtB,SAAiBJ,GACb,OACI,yBAAKC,UAAU,qBACX,4BAAI,uBAAGgB,KAAK,MAAMjB,EAAMU,QACxB,uBAAGT,UAAU,SAAb,2DAAiCD,EAAMO,WAcnD,SAASW,EAAKlB,GACZ,OAAOA,EAAMmB,KAAKC,KAAI,SAACC,GACrB,OAAQA,EAAKC,MACX,IAAK,QACH,OACE,kBAACb,EAAD,iBAAiBY,EAAjB,CAAuBE,IAAKC,IAAQC,cAGxC,IAAK,UACH,OACE,kBAACT,EAAD,iBAAmBK,EAAnB,CAAyBE,IAAKC,IAAQC,cAG1C,QACE,MAAO,OAKA,SAASC,IAAM,MAEFC,mBAAS,CAC7B,CACIL,KAAM,QACNV,IAAK,gFACLL,MAAO,IAEX,CACIe,KAAM,QACNV,IAAK,gFACLL,MAAO,IAEX,CACIe,KAAM,UACNZ,MAAO,wOACPH,MAAO,KAEX,CACIe,KAAM,UACNZ,MAAO,yKACPH,MAAO,MAEX,CACIe,KAAM,QACNV,IAAK,gFACLL,MAAO,MAEX,CACIe,KAAM,UACNZ,MAAO,uLACPH,MAAO,MA/BW,mBAEnBY,EAFmB,UAmC1B,OACI,kBAACD,EAAD,CAAMC,KAAMA,ICrEAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd96930e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Popular(props) {\n    return (\n        <div className=\"wrap-item wrap-item-popular\">\n            <span className=\"label\">Popular!</span>\n            {props.children}\n        </div>\n    )\n};\n","import React from 'react';\n\nexport default function New(props) {\n    return (\n        <div className=\"wrap-item wrap-item-new\">\n            <span className=\"label\">New!</span>\n            {props.children}\n        </div>\n    )\n};\n","import React from 'react';\nimport Popular from './Popular';\nimport New from './New';\n\nexport default function Rating(Component) {\n  return class extends React.Component {\n    render() {\n      if (this.props.views >= 1000) {\n        return (\n          <Popular>\n            <Component {...this.props} />\n          </Popular>\n        );\n      } else if (this.props.views < 100) {\n        return (\n          <New>\n            <Component {...this.props} />\n          </New>\n        );\n      }\n      return <Component {...this.props} />;\n    }\n  };\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Rating from './components/Rating'\nimport shortid from 'shortid';\n\nconst RatingVideo = Rating(Video);\nconst RatingArticle = Rating(Article);\n\nfunction Article(props) {\n    return (\n        <div className=\"item item-article\">\n            <h3><a href=\"#0\">{props.title}</a></h3>\n            <p className=\"views\">Прочтений: {props.views}</p>\n        </div>\n    )\n};\n\nfunction Video(props) {\n    return (\n        <div className=\"item item-video\">\n            <iframe title=\"video\" src={props.url} frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n            <p className=\"views\">Просмотров: {props.views}</p>\n        </div>\n    )\n};\n\nfunction List(props) {\n  return props.list.map((item) => {\n    switch (item.type) {\n      case 'video':\n        return (\n          <RatingVideo {...item} key={shortid.generate()} />\n        );\n\n      case 'article':\n        return (\n          <RatingArticle {...item} key={shortid.generate()} />\n        );\n\n      default:\n        return '';\n    }\n  });\n};\n\nexport default function App() {\n  // eslint-disable-next-line no-unused-vars\n    const [list, setList] = useState([\n        {\n            type: 'video',\n            url: 'https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0',\n            views: 50\n        },\n        {\n            type: 'video',\n            url: 'https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0',\n            views: 12\n        },\n        {\n            type: 'article',\n            title: 'Невероятные события в неизвестном поселке...',\n            views: 175\n        },\n        {\n            type: 'article',\n            title: 'Секретные данные были раскрыты!',\n            views: 1532\n        },\n        {\n            type: 'video',\n            url: 'https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0',\n            views: 4253\n        },\n        {\n            type: 'article',\n            title: 'Кот Бегемот обладает невероятной...',\n            views: 12,\n        },\n    ]);\n\n    return (\n        <List list={list} />\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}